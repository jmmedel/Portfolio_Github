$matrix-color: #34ff34;

$matrix-width: 100vmin;
$matrix-height: 100vmin;

$matrix-cols: 16;
$matrix-rows: 16;

$glow-duration: 2s;
$glow-ease: ease;

$mod: 17ms;

body{
	background: #000;
	overflow: hidden;
}

.matrix{
	color: $matrix-color;
	
	display: grid;
	
	grid-template-rows: 1fr;
	grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
	
	align-items: center;
	justify-content: center;
	
	position: absolute;
	top: 0px;
	left: 50%;
	
	width: $matrix-width;
	height: $matrix-height;
  
  transform: translate(-50%);
}

.matrix > .matrix-col{
	display: inline-grid;
	grid-template-columns: 1fr;
	grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
	
	align-items: center;
	justify-content: center;
	
	width: 100%;
	height: 100%;
}

.matrix > .matrix-col > span{
	font-size: 5vmin;
	animation: glow-text $glow-duration $glow-ease infinite;
	opacity: 0;
	
	text-align: center;
}

@keyframes glow-text{
	0%{
		opacity: 0;
		font-weight: 100;
	}
  49.9%{
		opacity: 0;
		font-weight: 100;
	}
	50%{
		opacity: 1;
		font-weight: 100;
	}
	100%{
		opacity: 0;
		font-weight: 1000;
	}
}

@for $c from 1 through $matrix-cols{
	@for $r from 1 through $matrix-rows{
		#col-#{$c} > span:nth-child(#{$r}){
			animation-delay: ($c * ($glow-duration / $matrix-cols) + $r * ($glow-duration / $matrix-rows)) + (($c + $r) - $mod*(($c + $r)/$mod));
		}
	}
}